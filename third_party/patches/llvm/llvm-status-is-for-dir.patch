diff --git a/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h b/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h
index af02fa2e7e87..5cdc80a69cbc 100644
--- a/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h
+++ b/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h
@@ -191,7 +191,7 @@ public:
       : ProxyFileSystem(std::move(FS)), SharedCache(SharedCache),
         PPSkipMappings(PPSkipMappings) {}
 
-  llvm::ErrorOr<llvm::vfs::Status> status(const Twine &Path) override;
+  llvm::ErrorOr<llvm::vfs::Status> status(const Twine &Path, bool isForDir = false) override;
   llvm::ErrorOr<std::unique_ptr<llvm::vfs::File>>
   openFileForRead(const Twine &Path) override;
 
@@ -205,7 +205,7 @@ private:
   bool shouldMinimize(StringRef Filename);
 
   llvm::ErrorOr<const CachedFileSystemEntry *>
-  getOrCreateFileSystemEntry(const StringRef Filename);
+  getOrCreateFileSystemEntry(const StringRef Filename, bool isForDir = false);
 
   /// Create a cached file system entry based on the initial status result.
   CachedFileSystemEntry
diff --git a/clang/lib/Basic/FileSystemStatCache.cpp b/clang/lib/Basic/FileSystemStatCache.cpp
index 415a4e2025df..416e3f26dd15 100644
--- a/clang/lib/Basic/FileSystemStatCache.cpp
+++ b/clang/lib/Basic/FileSystemStatCache.cpp
@@ -44,7 +44,7 @@ FileSystemStatCache::get(StringRef Path, llvm::vfs::Status &Status,
   else if (isForDir || !F) {
     // If this is a directory or a file descriptor is not needed and we have
     // no cache, just go to the file system.
-    llvm::ErrorOr<llvm::vfs::Status> StatusOrErr = FS.status(Path);
+    llvm::ErrorOr<llvm::vfs::Status> StatusOrErr = FS.status(Path, isForDir);
     if (!StatusOrErr) {
       RetCode = StatusOrErr.getError();
     } else {
diff --git a/clang/lib/Tooling/DependencyScanning/DependencyScanningFilesystem.cpp b/clang/lib/Tooling/DependencyScanning/DependencyScanningFilesystem.cpp
index f7c711690d7e..82bd4c380cfe 100644
--- a/clang/lib/Tooling/DependencyScanning/DependencyScanningFilesystem.cpp
+++ b/clang/lib/Tooling/DependencyScanning/DependencyScanningFilesystem.cpp
@@ -182,7 +182,7 @@ CachedFileSystemEntry DependencyScanningWorkerFilesystem::createFileSystemEntry(
 
 llvm::ErrorOr<const CachedFileSystemEntry *>
 DependencyScanningWorkerFilesystem::getOrCreateFileSystemEntry(
-    const StringRef Filename) {
+    const StringRef Filename, bool isForDir) {
   bool ShouldMinimize = shouldMinimize(Filename);
 
   if (const auto *Entry = Cache.getCachedEntry(Filename, ShouldMinimize))
@@ -198,7 +198,7 @@ DependencyScanningWorkerFilesystem::getOrCreateFileSystemEntry(
     std::unique_lock<std::mutex> LockGuard(SharedCacheEntry.ValueLock);
     CachedFileSystemEntry &CacheEntry = SharedCacheEntry.Value;
 
-    if (!CacheEntry.isValid()) {
+    if (!CacheEntry.isValid() || isForDir) {
       auto MaybeStatus = getUnderlyingFS().status(Filename);
       if (!MaybeStatus && !shouldCacheStatFailures(Filename))
         // HACK: We need to always restat non source files if the stat fails.
@@ -219,11 +219,11 @@ DependencyScanningWorkerFilesystem::getOrCreateFileSystemEntry(
 }
 
 llvm::ErrorOr<llvm::vfs::Status>
-DependencyScanningWorkerFilesystem::status(const Twine &Path) {
+DependencyScanningWorkerFilesystem::status(const Twine &Path, bool isForDir) {
   SmallString<256> OwnedFilename;
   StringRef Filename = Path.toStringRef(OwnedFilename);
   const llvm::ErrorOr<const CachedFileSystemEntry *> Result =
-      getOrCreateFileSystemEntry(Filename);
+      getOrCreateFileSystemEntry(Filename, isForDir);
   if (!Result)
     return Result.getError();
   return (*Result)->getStatus();
diff --git a/llvm/include/llvm/Support/VirtualFileSystem.h b/llvm/include/llvm/Support/VirtualFileSystem.h
index 10d2389ee079..cb82c1298671 100644
--- a/llvm/include/llvm/Support/VirtualFileSystem.h
+++ b/llvm/include/llvm/Support/VirtualFileSystem.h
@@ -255,7 +255,7 @@ public:
   virtual ~FileSystem();
 
   /// Get the status of the entry at \p Path, if one exists.
-  virtual llvm::ErrorOr<Status> status(const Twine &Path) = 0;
+  virtual llvm::ErrorOr<Status> status(const Twine &Path, bool isForDir = false) = 0;
 
   /// Get a \p File object for the file at \p Path, if one exists.
   virtual llvm::ErrorOr<std::unique_ptr<File>>
@@ -340,7 +340,7 @@ public:
   /// Pushes a file system on top of the stack.
   void pushOverlay(IntrusiveRefCntPtr<FileSystem> FS);
 
-  llvm::ErrorOr<Status> status(const Twine &Path) override;
+  llvm::ErrorOr<Status> status(const Twine &Path, bool isForDir = false) override;
   llvm::ErrorOr<std::unique_ptr<File>>
   openFileForRead(const Twine &Path) override;
   directory_iterator dir_begin(const Twine &Dir, std::error_code &EC) override;
@@ -380,7 +380,7 @@ public:
   explicit ProxyFileSystem(IntrusiveRefCntPtr<FileSystem> FS)
       : FS(std::move(FS)) {}
 
-  llvm::ErrorOr<Status> status(const Twine &Path) override {
+  llvm::ErrorOr<Status> status(const Twine &Path, bool isForDir = false) override {
     return FS->status(Path);
   }
   llvm::ErrorOr<std::unique_ptr<File>>
@@ -483,7 +483,7 @@ public:
   /// Return true if this file system normalizes . and .. in paths.
   bool useNormalizedPaths() const { return UseNormalizedPaths; }
 
-  llvm::ErrorOr<Status> status(const Twine &Path) override;
+  llvm::ErrorOr<Status> status(const Twine &Path, bool isForDir = false) override;
   llvm::ErrorOr<std::unique_ptr<File>>
   openFileForRead(const Twine &Path) override;
   directory_iterator dir_begin(const Twine &Dir, std::error_code &EC) override;
@@ -849,7 +849,8 @@ public:
   create(ArrayRef<std::pair<std::string, std::string>> RemappedFiles,
          bool UseExternalNames, FileSystem &ExternalFS);
 
-  ErrorOr<Status> status(const Twine &Path) override;
+  ErrorOr<Status> status(const Twine &Path, bool isForDir = false) override;
+
   ErrorOr<std::unique_ptr<File>> openFileForRead(const Twine &Path) override;
 
   std::error_code getRealPath(const Twine &Path,
diff --git a/llvm/lib/Support/FileCollector.cpp b/llvm/lib/Support/FileCollector.cpp
index 5854baeebbb9..656b6dc81d97 100644
--- a/llvm/lib/Support/FileCollector.cpp
+++ b/llvm/lib/Support/FileCollector.cpp
@@ -258,7 +258,7 @@ public:
                                    std::shared_ptr<FileCollector> Collector)
       : FS(std::move(FS)), Collector(std::move(Collector)) {}
 
-  llvm::ErrorOr<llvm::vfs::Status> status(const Twine &Path) override {
+  llvm::ErrorOr<llvm::vfs::Status> status(const Twine &Path, bool isForDir = false) override {
     auto Result = FS->status(Path);
     if (Result && Result->exists())
       Collector->addFile(Path);
diff --git a/llvm/lib/Support/VirtualFileSystem.cpp b/llvm/lib/Support/VirtualFileSystem.cpp
index 9bf0384b5f1b..1ff8be76bfcf 100644
--- a/llvm/lib/Support/VirtualFileSystem.cpp
+++ b/llvm/lib/Support/VirtualFileSystem.cpp
@@ -260,7 +260,7 @@ public:
     }
   }
 
-  ErrorOr<Status> status(const Twine &Path) override;
+  ErrorOr<Status> status(const Twine &Path, bool isForDir = false) override;
   ErrorOr<std::unique_ptr<File>> openFileForRead(const Twine &Path) override;
   directory_iterator dir_begin(const Twine &Dir, std::error_code &EC) override;
 
@@ -292,7 +292,7 @@ private:
 
 } // namespace
 
-ErrorOr<Status> RealFileSystem::status(const Twine &Path) {
+ErrorOr<Status> RealFileSystem::status(const Twine &Path, bool isForDir) {
   SmallString<256> Storage;
   sys::fs::file_status RealStatus;
   if (std::error_code EC =
@@ -405,7 +405,7 @@ void OverlayFileSystem::pushOverlay(IntrusiveRefCntPtr<FileSystem> FS) {
   FS->setCurrentWorkingDirectory(getCurrentWorkingDirectory().get());
 }
 
-ErrorOr<Status> OverlayFileSystem::status(const Twine &Path) {
+ErrorOr<Status> OverlayFileSystem::status(const Twine &Path, bool isForDir) {
   // FIXME: handle symlinks that cross file systems
   for (iterator I = overlays_begin(), E = overlays_end(); I != E; ++I) {
     ErrorOr<Status> Status = (*I)->status(Path);
@@ -914,7 +914,7 @@ bool InMemoryFileSystem::addHardLink(const Twine &FromPath,
                        cast<detail::InMemoryFile>(*ToNode));
 }
 
-llvm::ErrorOr<Status> InMemoryFileSystem::status(const Twine &Path) {
+llvm::ErrorOr<Status> InMemoryFileSystem::status(const Twine &Path, bool isForDir) {
   auto Node = lookupInMemoryNode(*this, Root.get(), Path);
   if (Node)
     return detail::getNodeStatus(*Node, Path);
@@ -2021,7 +2021,7 @@ RedirectingFileSystem::getExternalStatus(const Twine &CanonicalPath,
   }
 }
 
-ErrorOr<Status> RedirectingFileSystem::status(const Twine &OriginalPath) {
+ErrorOr<Status> RedirectingFileSystem::status(const Twine &OriginalPath, bool isForDir) {
   SmallString<256> CanonicalPath;
   OriginalPath.toVector(CanonicalPath);
 
