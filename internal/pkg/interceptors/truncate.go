// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package interceptors

import (
	"context"
	"fmt"
	"os"
	"path/filepath"

	"github.com/bazelbuild/reclient/internal/pkg/protoencoding"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/proto"

	ppb "github.com/bazelbuild/reclient/api/proxy"

	log "github.com/golang/glog"
)

// DumpNameRegexPattern is a pattern of the names of the dump files generated by TruncInterceptor
const DumpNameRegexPattern = `^execution-\w{8}-\w{4}-\w{4}-\w{4}-\w{12}.dump$`

// NewTruncInterceptor creates an interceptor truncating the response to maxResponseSize
func NewTruncInterceptor(maxResponseSize int, dumpDir string) grpc.UnaryServerInterceptor {
	return func(ctx context.Context, req interface{}, _ *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {
		h, err := handler(ctx, req)
		if err != nil {
			return h, err
		}
		resp, ok := h.(*ppb.RunResponse)
		if !ok {
			return h, err
		}
		truncateResponse(resp, maxResponseSize, dumpDir)
		return resp, err
	}
}

func truncateResponse(response *ppb.RunResponse, maxResponseSize int, dumpDir string) {
	responseSize := proto.Size(response)
	if proto.Size(response) <= maxResponseSize {
		return
	}
	fileName, err := dumpResponse(response, dumpDir)
	var truncPrefix string
	if err != nil {
		truncPrefix = "[content truncated]..."
	} else {
		truncPrefix = fmt.Sprintf("[content truncated, full response in %s]...", fileName)
	}

	// minimum field size for the field to be considered for truncation (1kB or prefix length, whichever higher)
	minFieldLen := 1024
	if minFieldLen < len(truncPrefix) {
		minFieldLen = len(truncPrefix)
	}

	if stderrLen := len(response.Stderr); stderrLen > minFieldLen {
		truncFieldLen := getTruncFieldLen(responseSize, stderrLen, maxResponseSize, minFieldLen, len(truncPrefix))
		response.Stderr = append([]byte(truncPrefix), response.Stderr[stderrLen-truncFieldLen:]...)
	}

	if responseSize = proto.Size(response); responseSize <= maxResponseSize {
		return
	}

	if stdoutLen := len(response.Stdout); stdoutLen > minFieldLen {
		truncFieldLen := getTruncFieldLen(responseSize, stdoutLen, maxResponseSize, minFieldLen, len(truncPrefix))
		response.Stdout = append([]byte(truncPrefix), response.Stdout[stdoutLen-truncFieldLen:]...)
	}

	if responseSize = proto.Size(response); responseSize <= maxResponseSize || response.Result == nil {
		return
	}
	if msgLen := len(response.Result.Msg); msgLen > minFieldLen {
		truncFieldLen := getTruncFieldLen(responseSize, msgLen, maxResponseSize, minFieldLen, len(truncPrefix))
		response.Result.Msg = truncPrefix + response.Result.Msg[msgLen-truncFieldLen:]
	}
}

func dumpResponse(response *ppb.RunResponse, dumpDir string) (string, error) {
	fileName := filepath.Join(dumpDir, fmt.Sprintf("execution-%s.dump", response.ExecutionId))
	file, err := os.Create(fileName)
	defer file.Close()
	if err != nil {
		log.Warningf("Failed to create file %q, err: %v", fileName, err)
		return "", err
	}

	_, err = file.WriteString(protoencoding.TextWithIndent.Format(response))
	if err != nil {
		log.Warningf("Failed to dump ther response to %q, err: %v", fileName, err)
	}
	return fileName, err
}

// getDesiredFieldLen calculates the length of the truncated field (without the prefix)
// based on max allowed response size, the current size of the response and the current length of the field
func getTruncFieldLen(responseSize, currentFieldLen, maxResponseSize, minFieldLen, prefixLen int) int {
	truncFieldLen := maxResponseSize - (responseSize - currentFieldLen) - prefixLen
	if truncFieldLen >= (minFieldLen - prefixLen) {
		return truncFieldLen
	}
	return minFieldLen - prefixLen
}
